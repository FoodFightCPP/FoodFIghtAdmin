// <auto-generated />
using System;
using FoodFIghtAdmin.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FoodFIghtAdmin.Migrations
{
    [DbContext(typeof(FoodFightContext))]
    [Migration("20210328184103_spAdded")]
    partial class spAdded
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FoodFIghtAdmin.Models.AcceptedRestaurant", b =>
                {
                    b.Property<Guid>("AcceptedRestaurantId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("AcceptedRestaurantID");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime");

                    b.Property<Guid>("SwipeListId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("SwipeListID");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("UserID");

                    b.HasKey("AcceptedRestaurantId");

                    b.HasIndex(new[] { "SwipeListId" }, "fkIdx_AcceptedRestaurant_SwipeListID");

                    b.ToTable("AcceptedRestaurant");
                });

            modelBuilder.Entity("FoodFIghtAdmin.Models.BlockedRestaurant", b =>
                {
                    b.Property<Guid>("BlockedRestaurantId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("BlockedRestaurantID");

                    b.Property<string>("RestaurantId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("RestaurantID");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserID");

                    b.HasKey("BlockedRestaurantId");

                    b.HasIndex(new[] { "RestaurantId" }, "fkIdx_BlockedRestaurants_RestaurantID");

                    b.HasIndex(new[] { "UserId" }, "fkIdx_BlockedRestaurants_UserID");

                    b.ToTable("BlockedRestaurant");
                });

            modelBuilder.Entity("FoodFIghtAdmin.Models.BlockedUser", b =>
                {
                    b.Property<Guid>("BlockUserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("BlockUserID");

                    b.Property<Guid>("BaseUserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("BaseUserID");

                    b.Property<Guid>("BlockedUserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("BlockedUserID");

                    b.HasKey("BlockUserId");

                    b.HasIndex(new[] { "BaseUserId" }, "fkIdx_BlockedUsersBase_UserID");

                    b.HasIndex(new[] { "BlockedUserId" }, "fkIdx_BlockedUsersBlocked_UserID");

                    b.ToTable("BlockedUsers");
                });

            modelBuilder.Entity("FoodFIghtAdmin.Models.ConnectedUser", b =>
                {
                    b.Property<Guid>("ConnectedUserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ConnectedUserID");

                    b.Property<Guid>("BaseUserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("BaseUserID");

                    b.Property<Guid>("FriendUserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("FriendUserID");

                    b.HasKey("ConnectedUserId");

                    b.HasIndex(new[] { "BaseUserId" }, "fkIdx_ConnectedUsersBase_UserID");

                    b.HasIndex(new[] { "FriendUserId" }, "fkIdx_ConnectedUsersBlocked_UserID");

                    b.ToTable("ConnectedUsers");
                });

            modelBuilder.Entity("FoodFIghtAdmin.Models.FavoriteRestaurant", b =>
                {
                    b.Property<Guid>("FavoriteRestaurantId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("FavoriteRestaurantID");

                    b.Property<string>("RestaurantId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("RestaurantID");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserID");

                    b.HasKey("FavoriteRestaurantId");

                    b.HasIndex(new[] { "RestaurantId" }, "fkIdx_FavoriteRestaurant_RestaurantID");

                    b.HasIndex(new[] { "UserId" }, "fkIdx_FavoriteRestaurant_UserID");

                    b.ToTable("FavoriteRestaurant");
                });

            modelBuilder.Entity("FoodFIghtAdmin.Models.MatchSession", b =>
                {
                    b.Property<Guid>("MatchSessionId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("MatchSessionID");

                    b.Property<Guid>("ConnectedUserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ConnectedUserID");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Lat")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Lng")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("MatchSessionId");

                    b.HasIndex(new[] { "ConnectedUserId" }, "fkIdx_MatchSession_ConnectedUserID");

                    b.HasIndex(new[] { "MatchSessionId" }, "fkIdx_SwipeList_MatchSessionID");

                    b.ToTable("MatchSession");
                });

            modelBuilder.Entity("FoodFIghtAdmin.Models.MatchedRestaurant", b =>
                {
                    b.Property<Guid>("MatchRestaurantId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("MatchRestaurantID");

                    b.Property<Guid>("AcceptedRestaurantId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("AcceptedRestaurantID");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("DateTIme");

                    b.HasKey("MatchRestaurantId");

                    b.HasIndex(new[] { "AcceptedRestaurantId" }, "fkIdx_MatchedRestaurant_AcceptedRestaurantID");

                    b.ToTable("MatchedRestaurant");
                });

            modelBuilder.Entity("FoodFIghtAdmin.Models.RejectedRestaurant", b =>
                {
                    b.Property<Guid>("RejectedRestaurantId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("RejectedRestaurantID");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime");

                    b.Property<Guid>("SwipeListId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("SwipeListID");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("UserID");

                    b.HasKey("RejectedRestaurantId");

                    b.HasIndex(new[] { "SwipeListId" }, "fkIdx_RejectedRestaurant_SwipeListID");

                    b.ToTable("RejectedRestaurant");
                });

            modelBuilder.Entity("FoodFIghtAdmin.Models.Restaurant", b =>
                {
                    b.Property<string>("RestaurantId")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("RestaurantID");

                    b.Property<string>("City")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Lat")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Lng")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("OpenNow")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Photo")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double?>("Rating")
                        .HasColumnType("float");

                    b.Property<string>("State")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Street")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Website")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .IsFixedLength(true);

                    b.HasKey("RestaurantId");

                    b.HasIndex(new[] { "RestaurantId" }, "fkIdx_SwipeList_RestaurantID");

                    b.ToTable("Restaurants");
                });

            modelBuilder.Entity("FoodFIghtAdmin.Models.Setting", b =>
                {
                    b.Property<Guid>("SettingsId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("SettingsID");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("SettingsId");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("FoodFIghtAdmin.Models.SwipeList", b =>
                {
                    b.Property<Guid>("SwipeListId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("SwipeListID");

                    b.Property<Guid>("MatchSessionId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("MatchSessionID");

                    b.Property<string>("RestaurantId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("RestaurantID");

                    b.HasKey("SwipeListId");

                    b.HasIndex("MatchSessionId");

                    b.HasIndex("RestaurantId");

                    b.ToTable("SwipeList");
                });

            modelBuilder.Entity("FoodFIghtAdmin.Models.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserID");

                    b.Property<string>("Bio")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("City")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Facebook")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Gender")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Instagram")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Lat")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Lng")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ProfilePicture")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Salt")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("State")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Street")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Twitter")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Website")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .IsFixedLength(true);

                    b.HasKey("UserId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("FoodFIghtAdmin.Models.UserSetting", b =>
                {
                    b.Property<Guid>("UserSettingsId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserSettingsID");

                    b.Property<Guid>("SettingsId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("SettingsID");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserID");

                    b.HasKey("UserSettingsId");

                    b.HasIndex(new[] { "SettingsId" }, "fkIdx_UserSettings_SettingsID");

                    b.HasIndex(new[] { "UserId" }, "fkIdx_UserSettings_UserID");

                    b.ToTable("UserSettings");
                });

            modelBuilder.Entity("FoodFIghtAdmin.Models.AcceptedRestaurant", b =>
                {
                    b.HasOne("FoodFIghtAdmin.Models.SwipeList", "SwipeList")
                        .WithMany("AcceptedRestaurants")
                        .HasForeignKey("SwipeListId")
                        .HasConstraintName("FK_AcceptedRestaurant_SwipeListID")
                        .IsRequired();

                    b.Navigation("SwipeList");
                });

            modelBuilder.Entity("FoodFIghtAdmin.Models.BlockedRestaurant", b =>
                {
                    b.HasOne("FoodFIghtAdmin.Models.Restaurant", "Restaurant")
                        .WithMany("BlockedRestaurants")
                        .HasForeignKey("RestaurantId")
                        .HasConstraintName("FK_BlockedRestaurants_RestaurantID")
                        .IsRequired();

                    b.HasOne("FoodFIghtAdmin.Models.User", "User")
                        .WithMany("BlockedRestaurants")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_BlockedRestaurants_UserID")
                        .IsRequired();

                    b.Navigation("Restaurant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FoodFIghtAdmin.Models.BlockedUser", b =>
                {
                    b.HasOne("FoodFIghtAdmin.Models.User", "BaseUser")
                        .WithMany("BlockedUserBaseUsers")
                        .HasForeignKey("BaseUserId")
                        .HasConstraintName("FK_BlockedUsersBase_UserID")
                        .IsRequired();

                    b.HasOne("FoodFIghtAdmin.Models.User", "BlockedUserNavigation")
                        .WithMany("BlockedUserBlockedUserNavigations")
                        .HasForeignKey("BlockedUserId")
                        .HasConstraintName("FK_BlockedUsersID_UserID")
                        .IsRequired();

                    b.Navigation("BaseUser");

                    b.Navigation("BlockedUserNavigation");
                });

            modelBuilder.Entity("FoodFIghtAdmin.Models.ConnectedUser", b =>
                {
                    b.HasOne("FoodFIghtAdmin.Models.User", "BaseUser")
                        .WithMany("ConnectedUserBaseUsers")
                        .HasForeignKey("BaseUserId")
                        .HasConstraintName("FK_ConnectedUsersBase_UserID")
                        .IsRequired();

                    b.HasOne("FoodFIghtAdmin.Models.User", "FriendUser")
                        .WithMany("ConnectedUserFriendUsers")
                        .HasForeignKey("FriendUserId")
                        .HasConstraintName("FK_ConnectedUsersFriend_UserID")
                        .IsRequired();

                    b.Navigation("BaseUser");

                    b.Navigation("FriendUser");
                });

            modelBuilder.Entity("FoodFIghtAdmin.Models.FavoriteRestaurant", b =>
                {
                    b.HasOne("FoodFIghtAdmin.Models.Restaurant", "Restaurant")
                        .WithMany("FavoriteRestaurants")
                        .HasForeignKey("RestaurantId")
                        .HasConstraintName("FK_FavoriteRestaurant_RestaurantID")
                        .IsRequired();

                    b.HasOne("FoodFIghtAdmin.Models.User", "User")
                        .WithMany("FavoriteRestaurants")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_FavoriteRestaurant_UserID")
                        .IsRequired();

                    b.Navigation("Restaurant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FoodFIghtAdmin.Models.MatchSession", b =>
                {
                    b.HasOne("FoodFIghtAdmin.Models.ConnectedUser", "ConnectedUser")
                        .WithMany("MatchSessions")
                        .HasForeignKey("ConnectedUserId")
                        .HasConstraintName("FK_MatchSession_ConnectedID")
                        .IsRequired();

                    b.Navigation("ConnectedUser");
                });

            modelBuilder.Entity("FoodFIghtAdmin.Models.MatchedRestaurant", b =>
                {
                    b.HasOne("FoodFIghtAdmin.Models.AcceptedRestaurant", "AcceptedRestaurant")
                        .WithMany("MatchedRestaurants")
                        .HasForeignKey("AcceptedRestaurantId")
                        .HasConstraintName("FK_MatchedRestaurant_AcceptedRestaurantID")
                        .IsRequired();

                    b.Navigation("AcceptedRestaurant");
                });

            modelBuilder.Entity("FoodFIghtAdmin.Models.RejectedRestaurant", b =>
                {
                    b.HasOne("FoodFIghtAdmin.Models.SwipeList", "SwipeList")
                        .WithMany("RejectedRestaurants")
                        .HasForeignKey("SwipeListId")
                        .HasConstraintName("FK_RejectedRestaurant_SwipeListID")
                        .IsRequired();

                    b.Navigation("SwipeList");
                });

            modelBuilder.Entity("FoodFIghtAdmin.Models.SwipeList", b =>
                {
                    b.HasOne("FoodFIghtAdmin.Models.MatchSession", "MatchSession")
                        .WithMany("SwipeLists")
                        .HasForeignKey("MatchSessionId")
                        .HasConstraintName("FK_SwipeList_MatchSessionId")
                        .IsRequired();

                    b.HasOne("FoodFIghtAdmin.Models.Restaurant", "Restaurant")
                        .WithMany("SwipeLists")
                        .HasForeignKey("RestaurantId")
                        .HasConstraintName("FK_SwipeList_RestaurantID")
                        .IsRequired();

                    b.Navigation("MatchSession");

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("FoodFIghtAdmin.Models.UserSetting", b =>
                {
                    b.HasOne("FoodFIghtAdmin.Models.Setting", "Settings")
                        .WithMany("UserSettings")
                        .HasForeignKey("SettingsId")
                        .HasConstraintName("FK_UserSettings_SettingsID")
                        .IsRequired();

                    b.HasOne("FoodFIghtAdmin.Models.User", "User")
                        .WithMany("UserSettings")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_UserSettings_UserID")
                        .IsRequired();

                    b.Navigation("Settings");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FoodFIghtAdmin.Models.AcceptedRestaurant", b =>
                {
                    b.Navigation("MatchedRestaurants");
                });

            modelBuilder.Entity("FoodFIghtAdmin.Models.ConnectedUser", b =>
                {
                    b.Navigation("MatchSessions");
                });

            modelBuilder.Entity("FoodFIghtAdmin.Models.MatchSession", b =>
                {
                    b.Navigation("SwipeLists");
                });

            modelBuilder.Entity("FoodFIghtAdmin.Models.Restaurant", b =>
                {
                    b.Navigation("BlockedRestaurants");

                    b.Navigation("FavoriteRestaurants");

                    b.Navigation("SwipeLists");
                });

            modelBuilder.Entity("FoodFIghtAdmin.Models.Setting", b =>
                {
                    b.Navigation("UserSettings");
                });

            modelBuilder.Entity("FoodFIghtAdmin.Models.SwipeList", b =>
                {
                    b.Navigation("AcceptedRestaurants");

                    b.Navigation("RejectedRestaurants");
                });

            modelBuilder.Entity("FoodFIghtAdmin.Models.User", b =>
                {
                    b.Navigation("BlockedRestaurants");

                    b.Navigation("BlockedUserBaseUsers");

                    b.Navigation("BlockedUserBlockedUserNavigations");

                    b.Navigation("ConnectedUserBaseUsers");

                    b.Navigation("ConnectedUserFriendUsers");

                    b.Navigation("FavoriteRestaurants");

                    b.Navigation("UserSettings");
                });
#pragma warning restore 612, 618
        }
    }
}
